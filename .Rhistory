no_mem_mat
no_mem_mat[1,] = no_mem_res$ANOVA$p
no_mem_res$ANOVA$p
no_mem_res$ANOVA
#initialize output
no_mem_effects <- c("group","encode","trial_type","group:encode","group:trial_type","encode:trial_type","group:encode:trial_type")
no_mem_mat = matrix(nrow=nvox,ncol=length(no_mem_effects))
vdf = read.csv(paste0(dfs_dir,sprintf('/voxel_%s.csv',i)))
for (i in c('acc','hc_acc','subject')){vdf[[i]] <- as.factor(vdf[[i]])}
no_mem_res <- ezANOVA(data=vdf,dv=.(rsa),wid=.(subject),within=.(encode,trial_type),between=.(group),type=3)
i = 0
vdf = read.csv(paste0(dfs_dir,sprintf('/voxel_%s.csv',i)))
no_mem_res <- ezANOVA(data=vdf,dv=.(rsa),wid=.(subject),within=.(encode,trial_type),between=.(group),type=3)
i = 0
vdf = read.csv(paste0(dfs_dir,sprintf('/voxel_%s.csv',i)))
for (i in c('acc','hc_acc','subject')){vdf[[i]] <- as.factor(vdf[[i]])}
no_mem_res <- ezANOVA(data=vdf,dv=.(rsa),wid=.(subject),within=.(encode,trial_type),between=.(group),type=3)
no_mem_res$ANOVA$p
no_mem_mat[1,]
no_mem_mat[1,] = no_mem_res$ANOVA$p
no_mem_mat[1,]
rowi = i+1
i = 0
rowi = i+1
77779/10
77779/1
77779/.01
77779*.01
rm(list=ls())
nvox <- 77779
#initialize output
no_mem_effects <- c("group","encode","trial_type","group:encode","group:trial_type","encode:trial_type","group:encode:trial_type")
no_mem_mat = matrix(nrow=nvox,ncol=length(no_mem_effects))
dfs_dir <- '/Users/ach3377/Db_lpl/STUDY/FearCon/group_ER/voxel_dfs'#point to df dir
for (i in 0:777){
rowi = i+1
vdf = read.csv(paste0(dfs_dir,sprintf('/voxel_%s.csv',i)))
for (q in c('acc','hc_acc','subject')){vdf[[q]] <- as.factor(vdf[[q]])}
no_mem_res <- ezANOVA(data=vdf,dv=.(rsa),wid=.(subject),within=.(encode,trial_type),between=.(group),type=3)
no_mem_mat[rowi,] = no_mem_res$ANOVA$p
}
100%%10
100%%11
no_mem_mat
for (i in 0:777){
rowi = i+1
vdf = read.csv(paste0(dfs_dir,sprintf('/voxel_%s.csv',i)))
for (q in c('acc','hc_acc','subject')){vdf[[q]] <- as.factor(vdf[[q]])}
no_mem_res <- ezANOVA(data=vdf,dv=.(rsa),wid=.(subject),within=.(encode,trial_type),between=.(group),type=3)
no_mem_mat[rowi,] = no_mem_res$ANOVA$p
if (i%%10 == 0){print(i)}
}
?aggregate()
vdf
ag <- aggregate(vdf,by=list(vdf$subject,vdf$encode,vdf$trial_type))
ag <- aggregate(vdf,by=list(vdf$subject,vdf$encode,vdf$trial_type),mean)
warnings()
ag
ag <- aggregate(vdf$rsa,by=list(vdf$subject,vdf$encode,vdf$trial_type),mean)
ag
i
ag <- aggregate(vdf[['rsa','group']],by=list(vdf$subject,vdf$encode,vdf$trial_type),mean)
ag <- aggregate(vdf[['rsa','group']],by=list(vdf$subject,vdf$encode,vdf$trial_type),mean)
ag <- aggregate(list(vdf$rsa,vdf$group),by=list(vdf$subject,vdf$encode,vdf$trial_type),mean)
ag
ag <- aggregate(vdf$rsa,by=list(vdf$subject,vdf$encode,vdf$trial_type),mean)
ag
vdf['group'] = vdf$subject < 100
1 <100
int(1 <100)
integer(1<100)
integer(1<100,1)
as.logical(vdf$subject, <100)
as.logical(vdf$subject, <= 100)
as.logical(vdf$subject,vdf$subject <= 100)
vdf = read.csv(paste0(dfs_dir,sprintf('/voxel_%s.csv',i)))
ag <- aggregate(vdf$rsa,by=list(vdf$subject,vdf$encode,vdf$trial_type),mean)
ag
str(ag)
as.logical(vdf$subject,vdf$subject <= 100)
View(ag)
df['group'] = ifelse(ag$Group.1 < 100,1,2)
ag['group'] = ifelse(ag$Group.1 < 100,1,2)
rowi <- i+1
vdf <- read.csv(paste0(dfs_dir,sprintf('/voxel_%s.csv',i)))
no_mem_ag <- aggregate(vdf$rsa,by=list(vdf$subject,vdf$encode,vdf$trial_type),mean)
no_mem_ag
colnames(no_mem_ag) <- c('subject','encode','trial_type','rsa')
no_mem_ag
no_mem_ag['group'] <- ifelse(no_mem_ag$subject < 100,1,2)
str(no_mem_ag)
#for (q in c('acc','hc_acc','subject')){vdf[[q]] <- as.factor(vdf[[q]])}
for (q in c('subject','group')){no_mem_ag[[q]] <- as.factor(no_mem_ag[[q]])}
str(no_mem_ag)
#no_mem_res <- ezANOVA(data=vdf,dv=.(rsa),wid=.(subject),within=.(encode,trial_type),between=.(group),type=3)
no_mem_res <- ezANOVA(data=no_mem_ag,dv=.(rsa),wid=.(subject),within=.(encode,trial_type),between=.(group),type=3)
time
time()
?time()
sys.time
require(sys)
require(Sys)
Sys.time
Sys.time()
format(Sys.time(),'%s')
Sys.time()
system.time
rm(list=ls())
require(lme4)
require(MASS)
require(car)
require(ez)
nvox <- 77779
#initialize output
no_mem_effects <- c("group","encode","trial_type","group:encode","group:trial_type","encode:trial_type","group:encode:trial_type")
no_mem_mat = matrix(nrow=nvox,ncol=length(no_mem_effects))
dfs_dir <- '/Users/ach3377/Db_lpl/STUDY/FearCon/group_ER/voxel_dfs'#point to df dir
system.time(for (i in 0:10){
rowi <- i+1
vdf <- read.csv(paste0(dfs_dir,sprintf('/voxel_%s.csv',i)))
no_mem_ag <- aggregate(vdf$rsa,by=list(vdf$subject,vdf$encode,vdf$trial_type),mean)
colnames(no_mem_ag) <- c('subject','encode','trial_type','rsa')
no_mem_ag['group'] <- ifelse(no_mem_ag$subject < 100,1,2)
#for (q in c('acc','hc_acc','subject')){vdf[[q]] <- as.factor(vdf[[q]])}
for (q in c('subject','group')){no_mem_ag[[q]] <- as.factor(no_mem_ag[[q]])}
#no_mem_res <- ezANOVA(data=vdf,dv=.(rsa),wid=.(subject),within=.(encode,trial_type),between=.(group),type=3)
no_mem_res <- ezANOVA(data=no_mem_ag,dv=.(rsa),wid=.(subject),within=.(encode,trial_type),between=.(group),type=3)
no_mem_mat[rowi,] <- no_mem_res$ANOVA$p
if (i%%250 == 0){print(i)}#give us some readout of progress
})
rm(list=ls())
require(MASS)
nvox <- 77779
#initialize output
no_mem_effects <- c("group","encode","trial_type","group:encode","group:trial_type","encode:trial_type","group:encode:trial_type")
no_mem_mat = matrix(nrow=nvox,ncol=length(no_mem_effects))
dfs_dir <- '/Users/ach3377/Db_lpl/STUDY/FearCon/group_ER/voxel_dfs'#point to df dir
system.time(for (i in 0:10){
rowi <- i+1
vdf <- read.csv(paste0(dfs_dir,sprintf('/voxel_%s.csv',i)))
#no_mem_ag <- aggregate(vdf$rsa,by=list(vdf$subject,vdf$encode,vdf$trial_type),mean)
#colnames(no_mem_ag) <- c('subject','encode','trial_type','rsa')
#no_mem_ag['group'] <- ifelse(no_mem_ag$subject < 100,1,2)
for (q in c('acc','hc_acc','subject')){vdf[[q]] <- as.factor(vdf[[q]])}
#for (q in c('subject','group')){no_mem_ag[[q]] <- as.factor(no_mem_ag[[q]])}
no_mem_res <- ezANOVA(data=vdf,dv=.(rsa),wid=.(subject),within=.(encode,trial_type),between=.(group),type=3)
#no_mem_res <- ezANOVA(data=no_mem_ag,dv=.(rsa),wid=.(subject),within=.(encode,trial_type),between=.(group),type=3)
no_mem_mat[rowi,] <- no_mem_res$ANOVA$p
if (i%%250 == 0){print(i)}#give us some readout of progress
})
no_mem_mat
no_mem_df = data.frame(no_mem_mat)
colnames(no_mem_df) <- no_mem_effects
no_mem_df
save.csv
?write.csv
ER_dir <- '/Users/ach3377/Db_lpl/STUDY/FearCon/group_ER/'
dfs_dir <- pate0('voxel_dfs')#point to df dir
dfs_dir <- paste0('voxel_dfs')#point to df dir
dfs_dir <- paste0(ER_dir,'voxel_dfs')#point to df dir
write.csv(no_mem_df,paste0(output_dir,'/no_mem_ANOVA.csv'))
require(lme4)
require(MASS)
require(car)
require(ez)
ER_dir <- '/Users/ach3377/Db_lpl/STUDY/FearCon/group_ER'#working dir
dfs_dir <- paste0(ER_dir,'/voxel_dfs')#point to df dir
output_dir <- paste0(ER_dir,'/r_stats')#where to save
nvox <- 77779 #hardcoded
#initialize output - have to actually run these once to know the order of columsn - pretty sure its alphabetical
no_mem_effects <- c("group","encode","trial_type","group:encode","group:trial_type","encode:trial_type","group:encode:trial_type")
no_mem_mat = matrix(nrow=nvox,ncol=length(no_mem_effects))
system.time(for (i in 0:10){
vdf <- read.csv(paste0(dfs_dir,sprintf('/voxel_%s.csv',i))) #read in the voxel dataframe
no_mem_ag <- aggregate(vdf$rsa,by=list(vdf$subject,vdf$encode,vdf$trial_type),mean)#aggregate down to cell means
colnames(no_mem_ag) <- c('subject','encode','trial_type','rsa')  #rename the columns for clarity
no_mem_ag['group'] <- ifelse(no_mem_ag$subject < 100,1,2)#recreate the group column
for (q in c('subject','group')){no_mem_ag[[q]] <- as.factor(no_mem_ag[[q]])}  #factorize things that need it
#run the ANOVA
no_mem_res <- ezANOVA(data=no_mem_ag,dv=.(rsa),wid=.(subject),within=.(encode,trial_type),between=.(group),type=3)
rowi <- i+1 #correct for pythonic indexing
no_mem_mat[rowi,] <- no_mem_res$ANOVA$p #save the results
if (i%%250 == 0){print(i)}#give us some readout of progress
})
no_mem_df = data.frame(no_mem_mat)
colnames(no_mem_df) <- no_mem_effects
write.csv(no_mem_df,paste0(output_dir,'/no_mem_ANOVA.csv'))
no_mem_df
no_mem_effects
colnames(no_mem_df)
View(no_mem_df)
rm(list=ls())
require(lme4)
require(MASS)
require(car)
require(ez)
ER_dir <- '/Users/ach3377/Db_lpl/STUDY/FearCon/group_ER'#working dir
dfs_dir <- paste0(ER_dir,'/voxel_dfs')#point to df dir
output_dir <- paste0(ER_dir,'/r_stats')#where to save
nvox <- 77779 #hardcoded
#initialize output - have to actually run these once to know the order of columsn - pretty sure its alphabetical
no_mem_effects <- c("group","encode","trial_type","group:encode","group:trial_type","encode:trial_type","group:encode:trial_type")
no_mem_mat = matrix(nrow=nvox,ncol=length(no_mem_effects))
for (i in 0:77778){
vdf <- read.csv(paste0(dfs_dir,sprintf('/voxel_%s.csv',i))) #read in the voxel dataframe
#NO MEM - we don't have to exlude subs
no_mem_ag <- aggregate(vdf$rsa,by=list(vdf$subject,vdf$encode,vdf$trial_type),mean)#aggregate down to cell means
colnames(no_mem_ag) <- c('subject','encode','trial_type','rsa')  #rename the columns for clarity
no_mem_ag['group'] <- ifelse(no_mem_ag$subject < 100,1,2)#recreate the group column
for (q in c('subject','group')){no_mem_ag[[q]] <- as.factor(no_mem_ag[[q]])}  #factorize things that need it
#run the ANOVA
no_mem_res <- ezANOVA(data=no_mem_ag,dv=.(rsa),wid=.(subject),within=.(encode,trial_type),between=.(group),type=3)
rowi <- i+1 #correct for pythonic indexing
no_mem_mat[rowi,] <- no_mem_res$ANOVA$p #save the results
#Include memory - we have to exclude some subs
if (i%%250 == 0){print(i)}#give us some readout of progress
}
no_mem_df = data.frame(no_mem_mat)
colnames(no_mem_df) <- no_mem_effects
write.csv(no_mem_df,paste0(output_dir,'/no_mem_ANOVA.csv'))
require(ggpubr)
rm(list=ls())
require(ggplot2)
require(ggpubr)
require(ez)
#####################################
group_mem <- read.csv('/Users/ach3377/Db_lpl/STUDY/FearCon/graphing/memory/group_memory.csv')
group_mem[,'X'] <- list(NULL)
group_mem
group_mem$phase <- factor(group_mem$phase, levels=c('baseline','fear_conditioning','extinction','false_alarm'))
group_mem$condition <- factor(group_mem$condition, levels=c('CS+','CS-'))
group_mem$group <- factor(group_mem$group, levels=c('control','ptsd'))
group_mem$subject <- factor(group_mem$subject)
str(group_mem)
#####################################
#cr_dat <- group_mem
cr_dat <- subset(group_mem, phase %in% c('baseline','fear_conditioning','extinction'))
ezfull <- ezANOVA(data=cr_dat,dv=.(cr),wid=.(subject),within=.(phase,condition),between=.(group),type=3)
ezfull
ezfull <- ezANOVA(data=cr_dat,dv=.(cr),wid=.(subject),within=.(phase,condition),between=.(group),type=2)
ezfull
ezfull <- ezANOVA(data=cr_dat,dv=.(cr),wid=.(subject),within=.(phase,condition),between=.(group),type=1)
ezfull
ezfull <- ezANOVA(data=cr_dat,dv=.(cr),wid=.(subject),within=.(phase,condition),between=.(group),type=3)
ezfull
require(ez)
TR <- read.csv('/Users/ach3377/Db_lpl/STUDY/FearCon/graphing/signal_change/group_tr_df.csv')
TR$subject <- factor(TR$subject)
TR$trial <- factor(TR$trial)
TR$tr <- factor(TR$tr)
str(TR)
col
TR <- read.csv('/Users/ach3377/Db_lpl/STUDY/FearCon/graphing/signal_change/group_tr_df.csv')
for (q in c('subject','trial','tr')){TR[[q]] <- as.factor(TR[[q]])}
str(TR)
tr_res <- ezANOVA(data=TR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response,group),type=2)
tr_res
tr_res$ANOVA
rm(list=ls())
TR <- read.csv('/Users/ach3377/Db_lpl/STUDY/FearCon/graphing/signal_change/group_tr_df.csv')
for (q in c('subject','trial','tr')){TR[[q]] <- as.factor(TR[[q]])}
tr_res <- ezANOVA(data=TR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response,group),type=2)
tr_res$ANOVA
?subset
#str(TR)
TR <- subset(TR, tr %in% c(-2,-1,0))
tr_res <- ezANOVA(data=TR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response,group),type=2)
tr_res$ANOVA
cTR <- subset(TR, group %in% 'control')
c_res <- ezANOVA(data=cTR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response),type=2)
c_res$ANOVA
pTR <- subset(TR, group %in% 'ptsd')
p_res <- ezANOVA(data=pTR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response),type=2)
p_res$ANOVA
TR <- read.csv('/Users/ach3377/Db_lpl/STUDY/FearCon/graphing/signal_change/group_tr_df.csv')
for (q in c('subject','trial','tr')){TR[[q]] <- as.factor(TR[[q]])}
#str(TR)
#TR <- subset(TR, tr %in% c(-2,-1,0))
tr_res <- ezANOVA(data=TR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response,group),type=2)
tr_res$ANOVA
cTR <- subset(TR, group %in% 'control')
c_res <- ezANOVA(data=cTR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response),type=2)
c_res$ANOVA
c_res <- ezANOVA(data=cTR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response),type=3)
c_res$ANOVA
c_res <- ezANOVA(data=cTR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response),type=2)
c_res$ANOVA
pTR <- subset(TR, group %in% 'ptsd')
p_res <- ezANOVA(data=pTR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response),type=2)
p_res$ANOVA
TR <- read.csv('/Users/ach3377/Db_lpl/STUDY/FearCon/graphing/signal_change/group_tr_df.csv')
for (q in c('subject','trial','tr')){TR[[q]] <- as.factor(TR[[q]])}
#str(TR)
#TR <- subset(TR, tr %in% c(-2,-1,0))
#Between groups
tr_res <- ezANOVA(data=TR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response,group),type=2)
tr_res$ANOVA
#Control only
cTR <- subset(TR, group %in% 'control')
c_res <- ezANOVA(data=cTR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response),type=2)
c_res$ANOVA
#Control only
cTR <- subset(TR, group %in% 'control')
c_res <- ezANOVA(data=cTR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response),type=1)
c_res$ANOVA
#Control only
cTR <- subset(TR, group %in% 'control')
c_res <- ezANOVA(data=cTR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response),type=3)
c_res$ANOVA
#Control only
cTR <- subset(TR, group %in% 'control')
c_res <- ezANOVA(data=cTR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response),type=2)
c_res$ANOVA
cTR_ag <- aggregate(cTR$evidence,by=cTR$subject,mean)
cTR_ag <- aggregate(cTR$evidence,by=c(cTR$subject),mean)
cTR_ag <- aggregate(cTR$evidence,by=list(cTR$subject),mean)
View(cTR_ag)
boxplot(cTR_ag$x)
#PTSD only
pTR <- subset(TR, group %in% 'ptsd')
p_res <- ezANOVA(data=pTR,dv=.(evidence),wid=.(subject),within=.(tr),between=.(response),type=2)
p_res$ANOVA
install.packages("lmtest")
install.packages("lme4")
library(lmtest)
setwd
pwd
getcwd
getwd
getwd()
setwd("/Users/ach3377/Db_lpl/Dunsmoor Lab/posgen")
l
ls
ls()
pg<-read.csv("posgen_data.csv")
rm(list=ls())
## installing lmer package
setwd("/Users/ach3377/Db_lpl/Dunsmoor Lab/posgen")
#install.packages("lme4")
library(lmtest)
pg<-read.csv("posgen_data.csv")
pg_1 <- subset(pg, subset = phase == 1)
pg_2 <- subset(pg,subset = phase == 2)
pg_3 <- subset(pg,subset = phase == 3)
pg_1 <- subset(pg, subset = phase == 1)
pg_2 <- subset(pg,subset = phase == 2)
pg_3 <- subset(pg,subset = phase == 3)
fg<-read.csv("~/Desktop/Lab_Experiments/POSGEN/posgen/feargen_data.csv")
fg<-read.csv("feargen_data.csv")
fg_1 <- subset(fg, subset = phase == 1)
fg_2 <- subset(fg,subset = phase == 2)
fg_3 <- subset(fg,subset = phase == 3)
lm_pg_full <- lmer(pg$scr~pg$face+(1|pg$subject), REML=FALSE)
require(lme4)
lm_pg_full <- lmer(pg$scr~pg$face+(1|pg$subject), REML=FALSE)
lm_pg_full
lm_pg_1 <- lmer(pg_1$scr~pg_1$face+(1|pg_1$sub), REML=FALSE)
lm_pg_2 <- lmer(pg_2$scr~pg_2$face+(1|pg_2$sub), REML=FALSE)
lm_pg_3 <- lmer(pg_3$scr~pg_3$face+(1|pg_3$sub), REML=FALSE)
lm_pg_full_poly <- lmer(pg$scr~poly(pg$face,2)+(1|pg$sub), REML=FALSE)
lm_pg_1_poly <- lmer(pg_1$scr~poly(pg_1$face,2)+(1|pg_1$sub), REML=FALSE)
lm_pg_2_poly <- lmer(pg_2$scr~poly(pg_2$face,2)+(1|pg_2$sub), REML=FALSE)
lm_pg_3_poly <- lmer(pg_3$scr~poly(pg_3$face,2)+(1|pg_3$sub), REML=FALSE)
lm_fg_full <- lmer(fg$scr~fg$face+(1|pg$subject), REML=FALSE)
lm_fg_1 <- lmer(fg_1$scr~fg_1$face+(1|fg_1$sub), REML=FALSE)
lm_fg_2 <- lmer(fg_2$scr~fg_2$face+(1|fg_2$sub), REML=FALSE)
lm_fg_3 <- lmer(fg_3$scr~fg_3$face+(1|fg_3$sub), REML=FALSE)
lm_fg_full_poly <- lmer(fg$scr~poly(fg$face,2)+(1|pg$sub), REML=FALSE)
lm_fg_1_poly <- lmer(fg_1$scr~poly(fg_1$face,2)+(1|fg_1$sub), REML=FALSE)
lm_fg_2_poly <- lmer(fg_2$scr~poly(fg_2$face,2)+(1|fg_2$sub), REML=FALSE)
lm_fg_3_poly <- lmer(fg_3$scr~poly(fg_3$face,2)+(1|fg_3$sub), REML=FALSE)
summary(lm_pg_full)
summary(lm_pg_full_poly)
summary(lm_pg_1_poly)
summary(lm_pg_2)
summary(lm_pg_2_poly)
summary(lm_pg_3)
summary(lm_pg_3_poly)
summary(lm_fg_full)
summary(lm_fg_full_poly)
summary(lm_fg_1)
summary(lm_fg_1_poly)
summary(lm_fg_2)
summary(lm_fg_2_poly)
summary(lm_fg_3)
summary(lm_fg_3_poly)
require(lmtest)
lmtest
library(lmtest)
lmtest
lrtest
lrtest(lm_pg_full_poly,lm_pg_poly)
lrtest(lm_pg_full_poly,lm_pg_full)
lrtest?
q``
?lrtest
?lmtest
?lmer
lrtest(lm_pg_full_poly,lm_pg_full)
lrtest(lm_fg_full_poly,lm_fg_full)
lrtest(lm_fg_1_poly,lm_fg_1)
lrtest(lm_fg_3_poly,lm_fg_3)
summary(lm_pg_full)
summary(lm_pg_full_poly)
lm_pg_full$
q
lm_pg_full_poly$
View(lm_fg_1_poly)
View(lm_fg_1_poly)
View(lm_fg_1_poly$BIC)
pg<-read.csv("posgen_data.csv")
pg_1 <- subset(pg, subset = phase == 1)
pg_2 <- subset(pg,subset = phase == 2)
pg_3 <- subset(pg,subset = phase == 3)
fg<-read.csv("feargen_data.csv")
fg_1 <- subset(fg, subset = phase == 1)
fg_2 <- subset(fg,subset = phase == 2)
fg_3 <- subset(fg,subset = phase == 3)
##posgen modeling
lm_pg_full <- lmer(pg$scr~pg$face+(1|pg$subject), REML=FALSE)
lm_pg_1 <- lmer(pg_1$scr~pg_1$face+(1|pg_1$sub), REML=FALSE)
lm_pg_2 <- lmer(pg_2$scr~pg_2$face+(1|pg_2$sub), REML=FALSE)
lm_pg_3 <- lmer(pg_3$scr~pg_3$face+(1|pg_3$sub), REML=FALSE)
lm_pg_full_poly <- lmer(pg$scr~poly(pg$face,2)+(1|pg$sub), REML=FALSE)
lm_pg_1_poly <- lmer(pg_1$scr~poly(pg_1$face,2)+(1|pg_1$sub), REML=FALSE)
lm_pg_2_poly <- lmer(pg_2$scr~poly(pg_2$face,2)+(1|pg_2$sub), REML=FALSE)
lm_pg_3_poly <- lmer(pg_3$scr~poly(pg_3$face,2)+(1|pg_3$sub), REML=FALSE)
##feargen modeling
lm_fg_full <- lmer(fg$scr~fg$face+(1|pg$subject), REML=FALSE)
lm_fg_1 <- lmer(fg_1$scr~fg_1$face+(1|fg_1$sub), REML=FALSE)
lm_fg_2 <- lmer(fg_2$scr~fg_2$face+(1|fg_2$sub), REML=FALSE)
lm_fg_3 <- lmer(fg_3$scr~fg_3$face+(1|fg_3$sub), REML=FALSE)
lm_fg_full_poly <- lmer(fg$scr~poly(fg$face,2)+(1|pg$sub), REML=FALSE)
lm_fg_1_poly <- lmer(fg_1$scr~poly(fg_1$face,2)+(1|fg_1$sub), REML=FALSE)
lm_fg_2_poly <- lmer(fg_2$scr~poly(fg_2$face,2)+(1|fg_2$sub), REML=FALSE)
lm_fg_3_poly <- lmer(fg_3$scr~poly(fg_3$face,2)+(1|fg_3$sub), REML=FALSE)
## print out summary stats. AIC & BIC will be reported
## general trend of better poly fit for posgen, better
## linear fit for feargen
summary(lm_pg_full)
summary(lm_pg_full_poly)
lrtest(lm_pg_full_poly,lm_pg_full)
summary(lm_pg_1)
summary(lm_pg_1_poly)
lrtest(lm_pg_1_poly,lm_pg_1)
summary(lm_pg_2)
summary(lm_pg_2_poly)
lrtest(lm_pg_2_poly,lm_pg_2)
summary(lm_pg_3)
summary(lm_pg_3_poly)
lrtest(lm_pg_3_poly,lm_pg_3)
summary(lm_fg_full)
summary(lm_fg_full_poly)
lrtest(lm_fg_full_poly,lm_fg_full)
summary(lm_fg_1)
summary(lm_fg_1_poly)
lrtest(lm_fg_1_poly,lm_fg_1)
summary(lm_fg_2)
summary(lm_fg_2_poly)
lrtest(lm_fg_2_poly,lm_fg_2)
summary(lm_fg_3)
summary(lm_fg_3_poly)
lrtest(lm_fg_3_poly,lm_fg_3)
lrtest(lm_pg_full_poly,lm_pg_full)
lrtest(lm_pg_1_poly,lm_pg_1)
lrtest(lm_pg_2_poly,lm_pg_2)
lrtest(lm_pg_3_poly,lm_pg_3)
lrtest(lm_fg_full_poly,lm_fg_full)
lrtest(lm_fg_1_poly,lm_fg_1)
lrtest(lm_fg_2_poly,lm_fg_2)
lrtest(lm_fg_3_poly,lm_fg_3)
summary(lm_fg_3)
lm_fg_3
lm_fg_3$Formula
lm_fg_3['BIC']
View(lm_pg_1_poly)
summary(lm_pg_full)
lrtest(lm_pg_full_poly,lm_pg_full)
summary(lm_pg_full)
summary(lm_pg_full)['BIC']
a <- summary(lm_pg_full)
a$coefficients
a$optinfo
a$family
View(a)
a$AICtab['BIC']
print(summary(lm_pg_full)$AICtab['BIC'])
print(summary(lm_fg_2_poly)$AICtab['BIC'])
print(summary(lm_pg_full)$AICtab['BIC'])
print(summary(lm_pg_full_poly)$AICtab['BIC'])
lrtest(lm_pg_full_poly,lm_pg_full)
print(summary(lm_pg_1)$AICtab['BIC'])
print(summary(lm_pg_1_poly)$AICtab['BIC'])
lrtest(lm_pg_1_poly,lm_pg_1)
print(summary(lm_pg_2)$AICtab['BIC'])
print(summary(lm_pg_2_poly)$AICtab['BIC'])
lrtest(lm_pg_2_poly,lm_pg_2)
print(summary(lm_pg_3)$AICtab['BIC'])
print(summary(lm_pg_3_poly)$AICtab['BIC'])
lrtest(lm_pg_3_poly,lm_pg_3)
print(summary(lm_fg_full)$AICtab['BIC'])
print(summary(lm_fg_full_poly)$AICtab['BIC'])
lrtest(lm_fg_full_poly,lm_fg_full)
print(summary(lm_fg_1)$AICtab['BIC'])
print(summary(lm_fg_1_poly)$AICtab['BIC'])
lrtest(lm_fg_1_poly,lm_fg_1)
print(summary(lm_fg_2)$AICtab['BIC'])
print(summary(lm_fg_2_poly)$AICtab['BIC'])
lrtest(lm_fg_2_poly,lm_fg_2)
print(summary(lm_fg_3)$AICtab['BIC'])
print(summary(lm_fg_3_poly)$AICtab['BIC'])
lrtest(lm_fg_3_poly,lm_fg_3)
